% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/weighted_pmds.R
\name{edge_weights_for_pmds}
\alias{edge_weights_for_pmds}
\alias{cos_distance_weights}
\alias{prob_distance_weights}
\title{Calculate edge weights for pMDS}
\usage{
cos_distance_weights(g, pivots)

prob_distance_weights(g, k = 5)
}
\arguments{
\item{g}{A \code{tbl_graph} object}

\item{pivots}{Number of pivots}

\item{k}{Number of steps}
}
\description{
\ifelse{html}{\href{https://lifecycle.r-lib.org/articles/stages.html#experimental}{\figure{lifecycle-experimental.svg}{options: alt='[Experimental]'}}}{\strong{[Experimental]}}
}
\section{Cosine weights}{

The main idea is that nodes in close spatial proximity should have similar
distance profiles to all other nodes in the graph.
First, we calculate the pairwise distances between all nodes and a set
of randomly selected pivot nodes. After a double centering transformation,
we can compute the cosine distance \eqn{d(u, v)} between the distance profiles
for nodes \eqn{u} and \eqn{v} connected by an edge in the graph.

The cosine distance is a measure of similarity between
two vectors and ranges from -1 to 1, where 1 indicates maximal similarity and
-1 indicates maximal dissimilarity. Since we want to assign higher weights to
nodes that are dissimilar, we convert the distances as follows:

\deqn{w_{u,v} = 2 - d(u, v)}
}

\section{Transition probability weights}{

Weights are calculated for edges in the graph from the bidirectional
transition probability of a random walker. For an undirected edge \eqn{e_{i,j}},
we define the bidirectional transition probability \eqn{P(e_{u,v}} as the
probability of transitioning from \eqn{u} to \eqn{v} and back to \eqn{u}
in \eqn{k} steps. Note that it doesn't matter what node the random walker
starts from since it has to go in both directions. In this computation,
we also allow self-loops in the graph to slow the transition of the
random walker.

Then, we assume that there is a relationship between the bidirectional
transition probability and an exponential function which decays with distance:

\deqn{P(e_{u,v}) \propto e^{-d(u, v)}}

by solving for \eqn{d(u, v)}, we can define an edge weight that is proportional
to distance:

\deqn{w_{u,v} = -\log(P(e_{u,v}))}
}

