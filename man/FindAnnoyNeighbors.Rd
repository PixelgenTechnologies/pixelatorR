% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/doublet_detection.R
\name{FindAnnoyNeighbors}
\alias{FindAnnoyNeighbors}
\title{Approximate nearest neighbors using Annoy}
\usage{
FindAnnoyNeighbors(
  x,
  cells = NULL,
  n_trees = 50L,
  n_nn = 10L,
  search_k = NULL,
  annoy_alg = c("euclidean", "angular", "manhattan", "hamming")
)
}
\arguments{
\item{x}{A numeric matrix with data to find nearest neighbors. Rows are cells, and columns are features.}

\item{cells}{A character vector with cell names to find nearest neighbors for. If NULL, all cells are used.}

\item{n_trees}{An integer with the number of trees to build in the Annoy index.}

\item{n_nn}{An integer with the number of nearest neighbors to find.}

\item{search_k}{An integer with the number of nodes to search in the Annoy index. Default is \code{n_trees * n_nn}.}

\item{annoy_alg}{An character specifying which distance algorithm to use. Default is
\code{\link[RcppAnnoy]{AnnoyEuclidean}} (\code{"euclidean"}).
Available options are \code{"euclidean"}, \code{"angular"}, \code{"manhattan"}, and \code{"hamming"}.}
}
\value{
A tibble with the following columns:
\itemize{
\item{id: The cell name}
\item{index: The index of the cell in the Annoy index}
\item{item: The index of the nearest neighbor}
\item{distance: The distance (Euclidean by default) to the nearest neighbor}
\item{nn: The rank of the nearest neighbor}
\item{neighbor: The name of the nearest neighbor}
}
}
\description{
This function takes a matrix, and returns approximate Euclidean nearest
neighbors and distances of row items given the number of trees (n_trees)
and number of nearest neighbors (n_nn).
}
\examples{
x <- matrix(rnorm(1000), ncol = 10)
FindAnnoyNeighbors(x, n_trees = 50, n_nn = 10)

}
