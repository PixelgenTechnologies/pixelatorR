% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/types_check.R
\name{type-checks}
\alias{type-checks}
\alias{assert_single_value}
\alias{assert_vector}
\alias{assert_class}
\alias{assert_mpx_assay}
\alias{assert_within_limits}
\alias{assert_function}
\alias{assert_file_exists}
\alias{assert_file_ext}
\alias{assert_x_in_y}
\alias{assert_single_values_are_different}
\alias{assert_singles_match}
\alias{assert_length}
\alias{assert_max_length}
\alias{assert_vectors_x_y_length_equal}
\alias{assert_unique}
\alias{assert_col_class}
\alias{assert_col_in_data}
\alias{assert_non_empty_object}
\alias{assert_is_one_of}
\alias{assert_different}
\alias{assert_vectors_match}
\title{Type check helpers}
\usage{
assert_single_value(
  x,
  type = c("string", "numeric", "integer", "bool"),
  allow_null = FALSE,
  arg = caller_arg(x),
  call = caller_env()
)

assert_vector(
  x,
  type = c("character", "numeric", "integer", "logical"),
  n = 2,
  allow_null = FALSE,
  arg = caller_arg(x),
  call = caller_env()
)

assert_class(
  x,
  classes,
  allow_null = FALSE,
  arg = caller_arg(x),
  call = caller_env()
)

assert_mpx_assay(
  x,
  allow_null = FALSE,
  arg = caller_arg(x),
  call = caller_env()
)

assert_within_limits(x, limits, arg = caller_arg(x), call = caller_env())

assert_function(
  x,
  allow_null = FALSE,
  arg = caller_arg(x),
  call = caller_env()
)

assert_file_exists(x, allow_null = FALSE, call = caller_env())

assert_file_ext(x, ext, allow_null = FALSE, call = caller_env())

assert_x_in_y(
  x,
  y,
  allow_null = FALSE,
  arg_x = caller_arg(x),
  arg_y = caller_arg(y),
  call = caller_env()
)

assert_single_values_are_different(
  x,
  y,
  allow_null = FALSE,
  arg_x = caller_arg(x),
  arg_y = caller_arg(y),
  call = caller_env()
)

assert_singles_match(
  x,
  y,
  arg_x = caller_arg(x),
  arg_y = caller_arg(y),
  call = caller_env()
)

assert_length(
  x,
  n = 1,
  allow_null = FALSE,
  arg_x = caller_arg(x),
  call = caller_env()
)

assert_max_length(
  x,
  n = 1,
  allow_null = FALSE,
  arg_x = caller_arg(x),
  call = caller_env()
)

assert_vectors_x_y_length_equal(
  x,
  y,
  arg_x = caller_arg(x),
  arg_y = caller_arg(y),
  call = caller_env()
)

assert_unique(x, arg = caller_arg(x), call = caller_env())

assert_col_class(
  x,
  data,
  classes,
  allow_null = FALSE,
  arg_data = caller_arg(data),
  call = caller_env()
)

assert_col_in_data(
  x,
  data,
  allow_null = FALSE,
  arg_data = caller_arg(data),
  call = caller_env()
)

assert_non_empty_object(
  x,
  classes,
  allow_null = FALSE,
  arg = caller_arg(x),
  call = caller_env()
)

assert_is_one_of(
  x,
  choices,
  allow_null = FALSE,
  arg = caller_arg(x),
  call = caller_env()
)

assert_different(
  x,
  y,
  allow_null = FALSE,
  arg_x = caller_arg(x),
  arg_y = caller_arg(y),
  call = caller_env()
)

assert_vectors_match(
  x,
  y,
  allow_null = FALSE,
  arg_x = caller_arg(x),
  arg_y = caller_arg(y),
  call = caller_env()
)
}
\arguments{
\item{x, y}{An object to check}

\item{type}{A character string specifying the type or vector class to check against.}

\item{allow_null}{Either \code{TRUE} or \code{FALSE}. If \code{TRUE}, \code{x}
can be \code{NULL} and the check passes.}

\item{arg, arg_x, arg_y, arg_data}{The name of an argument to check. Used for error messages.}

\item{call}{An environment, typically the environment in which the function
was called}

\item{n}{An integer}

\item{classes}{A character vector of classes to check against}

\item{limits}{A numeric vector of length 2 specifying a lower and upper limit}

\item{ext}{A character string specifying a file extension}

\item{data}{A data-frame like object}
}
\value{
Nothing if the check passes, otherwise throws an error.
}
\description{
Utility functions for type checking in \code{pixelatorR}. These functions
throw informative error messages if the checks fail.
}
\details{
\itemize{
\item \code{assert_single_value} checks if \code{x} is a single value of a specified \code{type}.
\item \code{assert_vector} checks if \code{x} is a vector of a specified \code{type} and with at
least \code{n} elements.
\item \code{assert_class} checks if \code{x} is of a specific class.
\item \code{assert_mpx_assay} checks if \code{x} is a \code{CellGraphAssay} or \code{CellGraphAssay5}.
\item \code{assert_x_in_y} checks if all elements of \code{x} are in \code{y}.
\item \code{assert_single_values_are_different} checks if \code{x} and \code{y} are not different strings.
\item \code{assert_col_class} checks if column \code{x} in \code{data} is of a specific class.
\item \code{assert_col_in_data} checks if column \code{x} is present in \code{data}.
\item \code{assert_vectors_match} checks if vectors \code{x} and \code{y} are identical.
\item \code{assert_length} checks if vector \code{x} has a specific length.
\item \code{assert_within_limits} checks if values in \code{x} are within \code{limits}.
\item \code{assert_function} checks \code{x} is a function.
\item \code{assert_file_exists} checks is file \code{x} exists.
\item \code{assert_file_ext} checks is file \code{x} has file extension \code{ext}.
\item \code{assert_unique} checks if values in \code{x} are unique.
}
}
