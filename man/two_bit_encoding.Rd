% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/two_bit_encoding.R
\name{pack_2bits}
\alias{pack_2bits}
\alias{unpack_2bits}
\title{Encode/decode DNA sequences}
\usage{
pack_2bits(seq)

unpack_2bits(packed, k)
}
\arguments{
\item{seq}{A character vector of DNA sequences (e.g., "ACGT", "GCAT"). Sequences can only contain
A, C, G, or T. All sequences must be of the same length.}

\item{packed}{A 64-bit integer (class \code{integer64}) or character representing the packed DNA sequence.}

\item{k}{Integer. The number of bases in the original DNA sequence.}
}
\value{
\itemize{
\item \code{pack_2bits}: A vector of class \code{integer64} representing the 2-bit packed sequences.
\item \code{unpack_2bits}: A character string of DNA bases (e.g., "ACGT").
}
}
\description{
Encode/decode DNA sequences using 2 bits per base for efficient storage, comparison and processing.
}
\details{
\code{pack_2bits}: \cr Converts DNA strings (containing only A, C, G, T) into a 64-bit integers using 2 bits per base.
This allows compact storage and efficient comparison of short DNA sequences (kmers).

\code{unpack_2bits}: \cr Given a 64-bit integer encoding a DNA sequence using 2 bits per base (as from \code{pack_2bits}),
this function reconstructs the original DNA string.
}
\examples{
# Pack sequence
packed <- pack_2bits("TCGT") # returns integer64 encoding
packed

# Can be vectorized for multiple sequences
packed_seqs <- pack_2bits(rep("TCGTGTCGATCTATGCTGATGTCGTGAT", 1e4))
head(packed_seqs)

# Unpack sequence
unpack_2bits(packed, 4) # returns "TCGT"

# Can be vectorized for multiple sequences
unpacked_seqs <- unpack_2bits(packed_seqs, k = 28)
head(unpacked_seqs)

}
