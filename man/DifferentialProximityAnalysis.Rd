% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/generics.R, R/differential_proximity_analysis.R
\name{DifferentialProximityAnalysis}
\alias{DifferentialProximityAnalysis}
\alias{DifferentialProximityAnalysis.data.frame}
\alias{DifferentialProximityAnalysis.Seurat}
\title{Differential analysis of proximity scores}
\usage{
DifferentialProximityAnalysis(object, ...)

\method{DifferentialProximityAnalysis}{data.frame}(
  object,
  contrast_column,
  reference,
  targets = NULL,
  group_vars = NULL,
  proximity_metric = "join_count_z",
  metric_type = c("all", "self", "co"),
  backend = c("dplyr", "data.table"),
  min_n_obs = 0,
  p_adjust_method = c("bonferroni", "holm", "hochberg", "hommel", "BH", "BY", "fdr"),
  verbose = TRUE,
  ...
)

\method{DifferentialProximityAnalysis}{Seurat}(
  object,
  contrast_column,
  reference,
  targets = NULL,
  assay = NULL,
  group_vars = NULL,
  proximity_metric = "join_count_z",
  metric_type = c("all", "self", "co"),
  min_n_obs = 0,
  p_adjust_method = c("bonferroni", "holm", "hochberg", "hommel", "BH", "BY", "fdr"),
  verbose = TRUE,
  ...
)
}
\arguments{
\item{object}{An object containing PNA proximity scores}

\item{...}{Not yet implemented}

\item{contrast_column}{The name of the column where the group labels are stored.
This column must include \code{target} and \code{reference}.}

\item{reference}{The name of the reference group}

\item{targets}{The names of the target groups. These groups will be compared to the reference group.
If the value is set to \code{NULL} (default), all groups available in \code{contrast_column} except
\code{reference} will be compared to the \code{reference} group.}

\item{group_vars}{An optional character vector with column names to group the tests by.}

\item{proximity_metric}{The proximity metric to use. Any numeric data column in the proximity score table
can be selected. The default is "pearson_z".}

\item{metric_type}{One of "all", "self" or "cross". If "all", all pairwise comparisons are considered.
If "self", only protein pairs of the same type are considered. If "cross", protein pairs of different
type are considered.}

\item{backend}{One of "dplyr" or "data.table". The latter requires the \code{dtplyr} package to be installed.}

\item{min_n_obs}{Minimum number of observations allowed in a group. Target groups with less
observations than \code{min_n_obs} will be skipped.}

\item{p_adjust_method}{One of "bonferroni", "holm", "hochberg", "hommel", "BH", "BY" or "fdr".
(see \code{?p.adjust} for details)}

\item{verbose}{Print messages}

\item{assay}{Name of assay to use}
}
\value{
A \code{tbl_df} object with test results
}
\description{
Runs differential analysis (Running Wilcoxon rank-sum test) on proximity scores calculated
from Proximity Network Assay (PNA) data generated with the \code{Pixelator} data processing
pipeline.
}
\details{
If you are working with a \code{Seurat} object created with pixelatorR, the proximity scores
can be accessed with \code{\link{ProximityScores}}.

The input object should contain a \code{contrast_column} (character vector or factor)
that includes information about the groups to compare. A typical example is a column
with sample labels, for instance: "control", "stimulated1", "stimulated2". If the input
object is a \code{Seurat} object, the \code{contrast_column} should be available in
the \code{meta.data} slot. For those familiar with \code{FindMarkers} from Seurat,
\code{contrast_column} is equivalent to the \code{group.by} parameter.

The \code{targets} parameter specifies a character vector with the names of the groups
to compare \code{reference}. \code{targets} can be a single group name or a vector of
group names while \code{reference} can only refer to a single group. Both \code{targets}
and \code{reference} should be present in the \code{contrast_column}. These parameters
are similar to the \code{ident.1} and \code{ident.2} parameters in \code{FindMarkers}.
}
\section{Additional groups}{

The test is always computed between \code{targets} and \code{reference}, but it is possible
to add additional grouping variables with \code{group_vars}. If \code{group_vars} is used,
each comparison is split into groups defined by the \code{group_vars}. For instance, if we
have annotated cells into cell type populations and saved these annotations in a \code{meta.data}
column called "cell_type", we can pass "cell_type" to \code{group_vars="cell_type"} to split
tests across each cell type.
}

\section{Types of comparisons}{

Consider a scenario where we have a Seurat object (\code{seurat_object}) with Proximity Network Assay
(PNA) data. \code{seurat_object} contains a \code{meta.data} column called "sampleID"
that holds information about what samples the components originated from. This column could have
three sample IDs: "control", "stimulated1" and "stimulated2". In addition, we have a column
called "cell_type" that holds information about the cell type identity of each component.
\enumerate{
\item If we want to compare the "stimulated1" group to the "control" group:
\preformatted{
dp_markers <- DifferentialProximityAnalysis(
   object = seurat_object,
   contrast_column = "sampleID",
   reference = "control",
   targets = "stimulated1"
)
}
\item If we want to compare the "stimulated1" and "stimulated2" groups to the "control" group:
\preformatted{
dp_markers <- DifferentialProximityAnalysis(
  object = seurat_object,
  contrast_column = "sampleID",
  reference = "control",
  targets = c("stimulated1", "stimulated2")
)
}
\item If we want to compare the "stimulated1" and "stimulated2" groups to the "control" group, and split
the tests by cell type:
\preformatted{
dp_markers <- DifferentialProximityAnalysis(
   object = seurat_object,
   contrast_column = "sampleID",
   reference = "control",
   targets = c("stimulated1", "stimulated2"),
   group_vars = "cell_type"
)
}
}
}

\examples{
# TODO: Update examples with real data
library(dplyr)
example_data <- tidyr::expand_grid(
  marker_1 = c("HLA-ABC", "B2M", "CD4", "CD8", "CD20", "CD19", "CD45", "CD43") \%>\%
    rep(each = 50),
  marker_2 = c("HLA-ABC", "B2M", "CD4", "CD8", "CD20", "CD19", "CD45", "CD43") \%>\%
    rep(each = 50)
) \%>\%
  mutate(
    join_count_z = rnorm(n(), sd = 10)
  )

example_data <- example_data \%>\%
  mutate(sampleID = "ctrl") \%>\%
  bind_rows(
    example_data \%>\% mutate(join_count_z = join_count_z + 1) \%>\%
      mutate(sampleID = "treatment")
  )

# Compute statistics
dp_results <- DifferentialProximityAnalysis(
  example_data,
  contrast_column = "sampleID",
  reference = "ctrl",
  proximity_metric = "join_count_z",
  metric_type = "self"
)

}
\seealso{
Other DA-methods: 
\code{\link{RunDAA}()},
\code{\link{RunDCA}()},
\code{\link{RunDPA}()}
}
\concept{DA}
\concept{DA-methods}
