% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/generics.R, R/load_cell_graphs.R
\name{LoadCellGraphs}
\alias{LoadCellGraphs}
\alias{LoadCellGraphs.FileSystemDataset}
\alias{LoadCellGraphs.CellGraphAssay}
\alias{LoadCellGraphs.Seurat}
\title{Load CellGraphs}
\usage{
LoadCellGraphs(object, ...)

\method{LoadCellGraphs}{FileSystemDataset}(
  object,
  cells,
  load_as = c("bipartite", "Anode", "linegraph"),
  add_marker_counts = TRUE,
  chunk_length = 10,
  verbose = TRUE,
  ...
)

\method{LoadCellGraphs}{CellGraphAssay}(
  object,
  cells = colnames(object),
  load_as = c("bipartite", "Anode", "linegraph"),
  add_marker_counts = TRUE,
  force = FALSE,
  chunk_length = 10,
  verbose = TRUE,
  ...
)

\method{LoadCellGraphs}{Seurat}(
  object,
  assay = NULL,
  cells = colnames(object),
  load_as = c("bipartite", "Anode", "linegraph"),
  add_marker_counts = TRUE,
  force = FALSE,
  chunk_length = 10,
  verbose = TRUE,
  ...
)
}
\arguments{
\item{object}{A \code{Seurat} object or an \code{\link{CellGraphAssay}} object}

\item{...}{Parameters passed to other methods}

\item{cells}{A character vector of cell names to load CellGraphs for}

\item{load_as}{Choose how the cell graph should be represented (see details below)}

\item{add_marker_counts}{Should marker counts be added to the CellGraph objects?}

\item{chunk_length}{Length of chunks used to load CellGraphs from edge list.
Smaller chunks will likely take longer time to load, but decreases memory usage.}

\item{verbose}{Print messages}

\item{force}{Force load graph(s) if they are already loaded}

\item{assay}{Assay name}
}
\value{
An object with a list of \code{\link{CellGraph}} objects
}
\description{
Loads a list of \code{\link{CellGraph}} object into the "cellgraphs" slot, provided that
an arrow_data object exists in the "arrow_data" slot of a \code{\link{CellGraphAssay}}.
If the arrow_data is missing or the connection to it is dead, the method will attempt
to load the edgelist from the arrow_dir stored in the "arrow_dir" slot of the \code{\link{CellGraphAssay}}.
}
\details{
One can specify cells to load by their names using the \code{cells} parameter. Only
the \code{cells} specified will be loaded into the object. Note that the cell graphs
are large and will consume a lot of memory. For this reason, it is advisable to load
\code{\link{CellGraph}}s \strong{only} for cells of interest.

Graphs can be loaded as one of 'bipartite', 'Anode' or 'linegraph'. See details about each of
these graph representations in the sections below.
}
\section{Bi-partite graph}{

In the bi-partite graph, edges can only go from a upia to a upib. The bi-partite graph
is first collapsed from a multigraph to a simple graph by aggregating marker counts
for each upia/upib combination. For visualization of marker counts on the graph, it is
often convenient to project values on the nodes; however, the marker counts are not available
in the nodes in the bi-partite graph. To circumvent this issue, node counts are calculated
by aggregating its edge counts. This means that the total marker count will be inflated.
}

\section{A node projected-graph}{

In the A node projected-graph, pairs of upias that share a upib are connected with an edge.
The (upia) node counts are calculated by aggregating counts across all edges associated
with the A nodes. The number of nodes in the A node projected-graph is substantially
lower than the bi-partite graph.
}

\section{Line graph}{

Starting with a bi-partite graph, a node is placed on each edge. Then, an edge is drawn
between each pair of adjacent nodes. The number of nodes in the linegraph is equivalent
to the number of edges in the bi-partite graph. However, the number of edges is substantially
larger. One major advantage with the linegraph is that the node counts represent the actual
raw data, which is not the case for the bi-partite graph and the A node projected-graph. On the
down side, linegraphs are much larger and tends to slow down layout computations and
visualizations.
}

