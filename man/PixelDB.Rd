% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/duckdb_methods.R
\name{PixelDB}
\alias{PixelDB}
\title{PXL database class}
\description{
PXL database class

PXL database class
}
\details{
This class provides an interface for working with a PXL file.
A PXL file is a duckdb database that contains various tables created
by the Pixelator data processing pipeline.

The class provides methods to query the database and extract information
from it. The class is intended to be used internally by the package but
is exposed to the user for advanced use cases.

Example usage:

\if{html}{\out{<div class="sourceCode r">}}\preformatted{# Create a PixelDB object with a connection to a PXL file
pxl_db <- PixelDB$new("path/to/pxl/file")
pxl_db$info()

# Fetch count matrix
counts <- pxl_db$counts()

# Fetch proximity scores
proximity <- pxl_db$proximity()
}\if{html}{\out{</div>}}
}
\examples{

## ------------------------------------------------
## Method `PixelDB$new`
## ------------------------------------------------

library(dplyr)

pxl_file <- minimal_pna_pxl_file()
db <- PixelDB$new(pxl_file)


## ------------------------------------------------
## Method `PixelDB$finalize`
## ------------------------------------------------

con <- db$.__enclos_env__$private$con
rm(db)
gc(full = FALSE)

# Connection should now be closed
DBI::dbIsValid(con) # FALSE


## ------------------------------------------------
## Method `PixelDB$info`
## ------------------------------------------------

db <- PixelDB$new(pxl_file)
db$info()


## ------------------------------------------------
## Method `PixelDB$query`
## ------------------------------------------------

# Select the proximity score table
db$query("SELECT * FROM proximity") \%>\% head()


## ------------------------------------------------
## Method `PixelDB$reconnect`
## ------------------------------------------------

db$close()
db$reconnect()


## ------------------------------------------------
## Method `PixelDB$check_connection`
## ------------------------------------------------

# If the connection is closed, the method will attempt to reconnect
db$check_connection()


## ------------------------------------------------
## Method `PixelDB$names`
## ------------------------------------------------

# Get the table names
db$names()


## ------------------------------------------------
## Method `PixelDB$fetch_table`
## ------------------------------------------------

# Fetch any table from the database
db$fetch_table("proximity") \%>\% head()


## ------------------------------------------------
## Method `PixelDB$fetch_table_subset`
## ------------------------------------------------

# Fetch any table from the database and filter on the fly
db$fetch_table_subset(
  "proximity",
  columns_filter = list("component" = c("3898b03349c6e28d", "406b9e5d80941ca0"))
) \%>\% head()


## ------------------------------------------------
## Method `PixelDB$counts`
## ------------------------------------------------

# Fetch the antibody counts
X <- db$counts()
X[1:4, 1:4]


## ------------------------------------------------
## Method `PixelDB$proximity`
## ------------------------------------------------

# Fetch the proximity scores
prox <- db$proximity()
prox \%>\% head()


## ------------------------------------------------
## Method `PixelDB$cell_meta`
## ------------------------------------------------

# Fetch the cell meta data
db$cell_meta() \%>\% head()


## ------------------------------------------------
## Method `PixelDB$protein_meta`
## ------------------------------------------------

# Fetch the protein meta data
db$protein_meta() \%>\% head()


## ------------------------------------------------
## Method `PixelDB$run_meta`
## ------------------------------------------------

# Fetch the run meta data
db$run_meta()


## ------------------------------------------------
## Method `PixelDB$components_edgelist`
## ------------------------------------------------

# Fetch edgelists
db$components_edgelist("3898b03349c6e28d") \%>\% head()


## ------------------------------------------------
## Method `PixelDB$components_layout`
## ------------------------------------------------

# Fetch layouts (NOTE: This will only work if the layouts exist in the database)
\dontrun{
db$components_layout("3898b03349c6e28d")[[1]] \%>\% head()
}


## ------------------------------------------------
## Method `PixelDB$components_marker_counts`
## ------------------------------------------------

# Fetch marker counts
db$components_marker_counts("3898b03349c6e28d")[[1]][1:3, 1:4]


## ------------------------------------------------
## Method `PixelDB$export_parquet`
## ------------------------------------------------

# Export a table to a parquet file
tmp_parquet_file <- fs::file_temp(ext = "parquet")
db$export_parquet(tmp_parquet_file, "proximity")
fs::file_exists(tmp_parquet_file)


## ------------------------------------------------
## Method `PixelDB$close`
## ------------------------------------------------

# Close the connection when finished
db$close()

}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-PixelDB-new}{\code{PixelDB$new()}}
\item \href{#method-PixelDB-finalize}{\code{PixelDB$finalize()}}
\item \href{#method-PixelDB-info}{\code{PixelDB$info()}}
\item \href{#method-PixelDB-query}{\code{PixelDB$query()}}
\item \href{#method-PixelDB-reconnect}{\code{PixelDB$reconnect()}}
\item \href{#method-PixelDB-check_connection}{\code{PixelDB$check_connection()}}
\item \href{#method-PixelDB-names}{\code{PixelDB$names()}}
\item \href{#method-PixelDB-fetch_table}{\code{PixelDB$fetch_table()}}
\item \href{#method-PixelDB-fetch_table_subset}{\code{PixelDB$fetch_table_subset()}}
\item \href{#method-PixelDB-counts}{\code{PixelDB$counts()}}
\item \href{#method-PixelDB-proximity}{\code{PixelDB$proximity()}}
\item \href{#method-PixelDB-cell_meta}{\code{PixelDB$cell_meta()}}
\item \href{#method-PixelDB-protein_meta}{\code{PixelDB$protein_meta()}}
\item \href{#method-PixelDB-run_meta}{\code{PixelDB$run_meta()}}
\item \href{#method-PixelDB-components_edgelist}{\code{PixelDB$components_edgelist()}}
\item \href{#method-PixelDB-components_layout}{\code{PixelDB$components_layout()}}
\item \href{#method-PixelDB-components_marker_counts}{\code{PixelDB$components_marker_counts()}}
\item \href{#method-PixelDB-export_parquet}{\code{PixelDB$export_parquet()}}
\item \href{#method-PixelDB-close}{\code{PixelDB$close()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-PixelDB-new"></a>}}
\if{latex}{\out{\hypertarget{method-PixelDB-new}{}}}
\subsection{Method \code{new()}}{
Set up a connection to a PXL file
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PixelDB$new(file)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{file}}{A path to a PXL file}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
An \code{R6} object representing the PXL database
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{library(dplyr)

pxl_file <- minimal_pna_pxl_file()
db <- PixelDB$new(pxl_file)

}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-PixelDB-finalize"></a>}}
\if{latex}{\out{\hypertarget{method-PixelDB-finalize}{}}}
\subsection{Method \code{finalize()}}{
Cleanup method that is called when the \code{PixelDB} object is garbage collected
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PixelDB$finalize()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
Nothing
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{con <- db$.__enclos_env__$private$con
rm(db)
gc(full = FALSE)

# Connection should now be closed
DBI::dbIsValid(con) # FALSE

}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-PixelDB-info"></a>}}
\if{latex}{\out{\hypertarget{method-PixelDB-info}{}}}
\subsection{Method \code{info()}}{
Show information about tables in the PXL file
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PixelDB$info()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
A \code{tbl_df} with information about tables in the PXL file
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{db <- PixelDB$new(pxl_file)
db$info()

}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-PixelDB-query"></a>}}
\if{latex}{\out{\hypertarget{method-PixelDB-query}{}}}
\subsection{Method \code{query()}}{
Send a database query
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PixelDB$query(sql)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{sql}}{An SQL query}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A \code{data.frame} with the results of the query
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{# Select the proximity score table
db$query("SELECT * FROM proximity") \%>\% head()

}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-PixelDB-reconnect"></a>}}
\if{latex}{\out{\hypertarget{method-PixelDB-reconnect}{}}}
\subsection{Method \code{reconnect()}}{
Method to reconnect to the PXL file. This is useful if the connection is lost,
for instance if the R session restarted.

If the method fails, an error is thrown.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PixelDB$reconnect()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
Nothing
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{db$close()
db$reconnect()

}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-PixelDB-check_connection"></a>}}
\if{latex}{\out{\hypertarget{method-PixelDB-check_connection}{}}}
\subsection{Method \code{check_connection()}}{
Check the connection to the PXL database

If the connection is invalid, the \code{$reconnect()} method is called.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PixelDB$check_connection()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
Nothing
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{# If the connection is closed, the method will attempt to reconnect
db$check_connection()

}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-PixelDB-names"></a>}}
\if{latex}{\out{\hypertarget{method-PixelDB-names}{}}}
\subsection{Method \code{names()}}{
Get the names of the tables in the database
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PixelDB$names()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
A character vector with table names that can be used
in \code{$fetch_table()}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{# Get the table names
db$names()

}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-PixelDB-fetch_table"></a>}}
\if{latex}{\out{\hypertarget{method-PixelDB-fetch_table}{}}}
\subsection{Method \code{fetch_table()}}{
Fetches an entire table from the database

This general method can be used to fetch any table from the database.
Large tables such as the edgelist are not recommended to be fetched in this way
as you will get the entire table in memory.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PixelDB$fetch_table(name)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{name}}{The name of the table}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A \code{data.frame} with the table contents
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{# Fetch any table from the database
db$fetch_table("proximity") \%>\% head()

}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-PixelDB-fetch_table_subset"></a>}}
\if{latex}{\out{\hypertarget{method-PixelDB-fetch_table_subset}{}}}
\subsection{Method \code{fetch_table_subset()}}{
Fetches a subset of columns from a table in the database

This method can be used to fetch a subset of columns from a table in the database.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PixelDB$fetch_table_subset(name, columns_filter)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{name}}{The name of the table}

\item{\code{columns_filter}}{A named list}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A \code{data.frame} with the table contents
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{# Fetch any table from the database and filter on the fly
db$fetch_table_subset(
  "proximity",
  columns_filter = list("component" = c("3898b03349c6e28d", "406b9e5d80941ca0"))
) \%>\% head()

}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-PixelDB-counts"></a>}}
\if{latex}{\out{\hypertarget{method-PixelDB-counts}{}}}
\subsection{Method \code{counts()}}{
Fetches the __adata__X count table from the database and converts it to a sparse \code{dgCMatrix}
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PixelDB$counts()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
A sparse matrix of class \code{dgCMatrix} with antibody counts
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{# Fetch the antibody counts
X <- db$counts()
X[1:4, 1:4]

}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-PixelDB-proximity"></a>}}
\if{latex}{\out{\hypertarget{method-PixelDB-proximity}{}}}
\subsection{Method \code{proximity()}}{
Fetches the proximity scores from the database
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PixelDB$proximity(calc_log2_ratio = TRUE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{calc_log2_ratio}}{A logical specifying whether to calculate and add
a log2ratio column to the output table. Default is \code{TRUE}}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A \code{tbl_df} with the proximity scores
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{# Fetch the proximity scores
prox <- db$proximity()
prox \%>\% head()

}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-PixelDB-cell_meta"></a>}}
\if{latex}{\out{\hypertarget{method-PixelDB-cell_meta}{}}}
\subsection{Method \code{cell_meta()}}{
Fetches the __adata__obs meta data
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PixelDB$cell_meta()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
A \code{data.frame} with the cell meta data
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{# Fetch the cell meta data
db$cell_meta() \%>\% head()

}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-PixelDB-protein_meta"></a>}}
\if{latex}{\out{\hypertarget{method-PixelDB-protein_meta}{}}}
\subsection{Method \code{protein_meta()}}{
Fetches the __adata__var meta data
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PixelDB$protein_meta()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
A \code{data.frame} with the protein meta data
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{# Fetch the protein meta data
db$protein_meta() \%>\% head()

}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-PixelDB-run_meta"></a>}}
\if{latex}{\out{\hypertarget{method-PixelDB-run_meta}{}}}
\subsection{Method \code{run_meta()}}{
Fetch the run meta data
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PixelDB$run_meta()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
A \code{tbl_df} with the run meta data
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{# Fetch the run meta data
db$run_meta()

}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-PixelDB-components_edgelist"></a>}}
\if{latex}{\out{\hypertarget{method-PixelDB-components_edgelist}{}}}
\subsection{Method \code{components_edgelist()}}{
Fetches a component edgelist or the entire edgelist from the database

The UMIs are encoded as int64 but since R doesn't support int64, the UMIs can be converted to
character vectors be specifying the \code{umi_data_type}.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PixelDB$components_edgelist(
  components,
  umi_data_type = c("int64", "string", "suffixed_string"),
  include_all_columns = FALSE
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{components}}{A character vector with component names or NULL to get all components}

\item{\code{umi_data_type}}{One of "int64", "string" or "suffixed_string". Default is "int64".
\itemize{
\item "int64": The UMIs are encoded as int64
\item "string": The UMIs are encoded as character
\item "suffixed_string": The UMIs are encoded as character with a suffix '-umi1' or '-umi2' added
}}

\item{\code{include_all_columns}}{Logical specifying whether to include all columns in the output.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A \code{data.frame} with the component edgelist:
\itemize{
\item umi1: A unique ID of the first RCA product
\item umi2: A unique ID of the second RCA product
\item marker_1: The first protein
\item marker_2: The second protein
\item component: The component name
\item read_count: The number of reads supporting the edge
\item uei_count: The number of unique event identifiers (UEIs) supporting the edge
}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{# Fetch edgelists
db$components_edgelist("3898b03349c6e28d") \%>\% head()

}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-PixelDB-components_layout"></a>}}
\if{latex}{\out{\hypertarget{method-PixelDB-components_layout}{}}}
\subsection{Method \code{components_layout()}}{
Fetches layout for selected components

This method fetches the x, y, z layout coordinates for selected PNA \code{components}.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PixelDB$components_layout(
  components,
  add_marker_counts = FALSE,
  verbose = TRUE
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{components}}{A vector of component names or NULL for all components}

\item{\code{add_marker_counts}}{Add marker counts in wide format to the layout tables}

\item{\code{verbose}}{Print messages}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A list with \code{tbl_df}'s with the layout coordinates and optionally marker counts
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{# Fetch layouts (NOTE: This will only work if the layouts exist in the database)
\dontrun{
db$components_layout("3898b03349c6e28d")[[1]] \%>\% head()
}

}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-PixelDB-components_marker_counts"></a>}}
\if{latex}{\out{\hypertarget{method-PixelDB-components_marker_counts}{}}}
\subsection{Method \code{components_marker_counts()}}{
Fetches marker counts for components

This method fetches the node marker counts for selected \code{components}. The node IDs
are stored in the \code{name} column. If \code{components} is \code{NULL}, all
component marker counts are returned with an additional \code{components} column in
the resulting table.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PixelDB$components_marker_counts(
  components,
  as_sparse = FALSE,
  verbose = FALSE
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{components}}{A vector of component IDs or NULL for all components}

\item{\code{as_sparse}}{Return the marker counts as a sparse matrix}

\item{\code{verbose}}{Print messages}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A list with \code{tbl_df}'s with the marker counts
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{# Fetch marker counts
db$components_marker_counts("3898b03349c6e28d")[[1]][1:3, 1:4]

}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-PixelDB-export_parquet"></a>}}
\if{latex}{\out{\hypertarget{method-PixelDB-export_parquet}{}}}
\subsection{Method \code{export_parquet()}}{
Export a table to a parquet file
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PixelDB$export_parquet(
  parquet_file,
  table_name = c("proximity", "edgelist", "layouts"),
  compression = c("snappy", "zstd"),
  compression_level = 1L
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{parquet_file}}{Path to the parquet file}

\item{\code{table_name}}{The name of the table to export}

\item{\code{compression}}{The compression algorithm to use. Options are 'snappy' and 'zstd'.}

\item{\code{compression_level}}{The compression level to use. Default is 1. Only used when
compression is 'zstd'.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Nothing
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{# Export a table to a parquet file
tmp_parquet_file <- fs::file_temp(ext = "parquet")
db$export_parquet(tmp_parquet_file, "proximity")
fs::file_exists(tmp_parquet_file)

}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-PixelDB-close"></a>}}
\if{latex}{\out{\hypertarget{method-PixelDB-close}{}}}
\subsection{Method \code{close()}}{
Close connection
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PixelDB$close()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
Nothing
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{# Close the connection when finished
db$close()

}
\if{html}{\out{</div>}}

}

}
}
